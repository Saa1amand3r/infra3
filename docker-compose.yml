services:
  eg_spring_app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: spring-quotes-app
    ports:
      - '8080:8080'
    depends_on:
      - postgres_quotes_db
    networks:
      - eg_network
    

  eg_react_app:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: react-frontend
    depends_on:
      - eg_spring_app
    ports:
      - '3000:3000'
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules
    networks:
      - eg_network
    command: sh -c "npm install && npm start"


  postgres_quotes_db:
    image: postgres:17.2-alpine
    container_name: postgres-quotes-db
    restart: always
    environment:
      POSTGRES_DB: quotesDb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5066:5432'
    volumes:
      - eg-db-data:/var/lib/postgresql/data
    networks:
      - eg_network
  
  eg-nginx-proxy:
    image: nginx:alpine
    container_name: infra3-eg-nginx-proxy-1
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - certs:/etc/letsencrypt:ro
      - certbot:/etc/certs:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - eg_spring_app
      - eg-certbot-acme
    networks:
      - eg_network

  eg-certbot-acme:
    image: neilpang/acme.sh
#    build:
#      context: ./certbot-acme
#      dockerfile: Dockerfile
    container_name: acme-sh
    command: tail -f /dev/null
    user: "0:0"
    volumes:
      - certs:/acme.sh
      - certbot:/certs
    networks:
      - eg_network

volumes:
  certs:
  eg-db-data:
  certbot:

networks:
  eg_network:
    driver: bridge
