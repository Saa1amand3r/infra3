- name: Setup Dockerized Quotes application with HTTPS on AlmaLinux
  hosts: eg_quotes_vm
  become: true

  vars:
    repo_dir: /opt/quotes
    nginx_container: infra3-eg-nginx-proxy-1
    certbot_container: acme-sh
    repo_url: https://github.com/Saa1amand3r/infra3.git

  tasks:
    - name: Install required packages
      dnf:
        name:
          - dnf-plugins-core
          - curl
          - git
          - firewalld
        state: present
        update_cache: true

    - name: Add Docker CE repo
      command: dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    - name: Install Docker CE
      dnf:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Enable and start Docker
      service:
        name: docker
        state: started
        enabled: true

    - name: Enable and start firewalld
      service:
        name: firewalld
        state: started
        enabled: true
   
    - name: Open required firewall ports
      command: firewall-cmd --permanent --add-port={{ item }}/tcp
      loop: [22, 80, 443]

    - name: Reload firewalld
      command: firewall-cmd --reload


    - name: Install Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/latest/download/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
        dest: /usr/local/bin/docker-compose
        mode: '0755'

    - name: Clone the repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dir }}"
        version: main

    - name: Start Docker containers
      command: /usr/local/bin/docker-compose up -d
      args:
        chdir: "{{ repo_dir }}"
      register: compose_up
      retries: 3
      delay: 5
      until: compose_up.rc == 0

    - name: Wait for Nginx container to be up
      shell: |
        until docker exec {{ nginx_container }} nginx -v > /dev/null 2>&1; do
          echo "Waiting for nginx container..."
          sleep 3
        done
      retries: 10
      delay: 3
      register: nginx_ready
      until: nginx_ready.rc == 0

    - name: Template pre-HTTPS Nginx config
      template:
        src: temp/beforeCertDep
        dest: "{{ repo_dir }}/nginx-before.conf"

    - name: Copy pre-HTTPS config into Nginx
      command: docker cp "{{ repo_dir }}/nginx-before.conf" {{ nginx_container }}:/etc/nginx/nginx.conf


    - name: Reload Nginx with HTTP config
      command: docker exec {{ nginx_container }} nginx -s reload

    - name: Create folder for ACME challenge inside Nginx
      command: docker exec {{ nginx_container }} sh -c "mkdir -p ../../certbot/conf/live/eg-quotes.duckdns.org"

#    - name: Generate self-signed certificate
#      command: >
#        docker cp ../../certbot-acme/issue.sh acme-sh:/issue.sh && \
#        docker exec acme-sh chmod +x /issue.sh && \
#        docker exec acme-sh /issue.sh
    - name: pwd command before running certbot
      shell: pwd
      register: result
    - debug:
        var: result.stdout
    - name: Debug current repo and script path
      shell: |
        ls -l "{{ repo_dir }}/../certbot-acme/issue-dep.sh"
      register: script_path_check
      ignore_errors: true

    - debug:
        var: script_path_check.stdout_lines

    - name: Run acme.sh script in container as root to avoid permission issues
      shell: |
        docker cp {{ repo_dir }}/certbot-acme/issue-dep.sh acme-sh:/issue.sh
        docker exec --user root acme-sh chmod +x /issue.sh
        docker exec --user root acme-sh mkdir -p /acme.sh/live/eg-quotes-dep.duckdns.org
        docker exec --user root acme-sh /issue.sh
      args:
        executable: /bin/sh
    - name: Copy certs to shared /certs folder via acme.sh install-cert
      shell: |
        docker exec --user root acme-sh acme.sh --install-cert -d eg-quotes-dep.duckdns.org \
        --fullchain-file /certs/fullchain.pem \
        --key-file /certs/privkey.pem

    
    - name: Template post-HTTPS Nginx config
      template:
        src: temp/afterCertDep
        dest: "{{ repo_dir }}/nginx-after.conf"


    - name: Copy post-HTTPS config into Nginx
      command: docker cp "{{ repo_dir }}/nginx-after.conf" {{ nginx_container }}:/etc/nginx/nginx.conf

    - name: Reload Nginx with HTTPS config
      command: docker exec {{ nginx_container }} nginx -s reload
